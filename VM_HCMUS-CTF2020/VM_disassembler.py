vm_bytecode =  [0x96, 0x01, 0x4D, 0x69, 0x00, 0xCD, 0xE3, 0x00, 0x0F, 0x00, 
                0x1B, 0x64, 0x57, 0xCD, 0xE3, 0x00, 0x96, 0x01, 0x34, 0x69, 
                0x01, 0xCD, 0xE3, 0x00, 0x05, 0x01, 0x1A, 0x64, 0xA2, 0xCD, 
                0xE3, 0x00, 0x96, 0x01, 0x4C, 0x69, 0x02, 0xCD, 0xE3, 0x00, 
                0x1E, 0x02, 0x19, 0x64, 0x25, 0xCD, 0xE3, 0x00, 0x96, 0x01, 
                0x77, 0x69, 0x03, 0xCD, 0xE3, 0x00, 0x1E, 0x03, 0x18, 0x64, 
                0x1F, 0xCD, 0xE3, 0x00, 0x96, 0x01, 0x61, 0x69, 0x04, 0xCD, 
                0xE3, 0x00, 0x0A, 0x04, 0x17, 0x64, 0xFE, 0xCD, 0xE3, 0x00, 
                0x96, 0x01, 0x72, 0x69, 0x05, 0xCD, 0xE3, 0x00, 0x1E, 0x05, 
                0x16, 0x64, 0x46, 0xCD, 0xE3, 0x00, 0x96, 0x01, 0x33, 0x69, 
                0x06, 0xCD, 0xE3, 0x00, 0x0F, 0x06, 0x15, 0x64, 0xB7, 0xCD, 
                0xE3, 0x00, 0x96, 0x01, 0x5F, 0x69, 0x07, 0xCD, 0xE3, 0x00, 
                0x0F, 0x07, 0x14, 0x64, 0x41, 0xCD, 0xE3, 0x00, 0x96, 0x01, 
                0x75, 0x69, 0x08, 0xCD, 0xE3, 0x00, 0x0A, 0x08, 0x13, 0x64, 
                0x29, 0xCD, 0xE3, 0x00, 0x96, 0x01, 0x73, 0x69, 0x09, 0xCD, 
                0xE3, 0x00, 0x05, 0x09, 0x12, 0x64, 0xD4, 0xCD, 0xE3, 0x00, 
                0x96, 0x01, 0x33, 0x69, 0x0A, 0xCD, 0xE3, 0x00, 0x05, 0x0A, 
                0x11, 0x64, 0xA8, 0xCD, 0xE3, 0x00, 0x96, 0x01, 0x73, 0x69, 
                0x0B, 0xCD, 0xE3, 0x00, 0x0F, 0x0B, 0x10, 0x64, 0x1C, 0xCD, 
                0xE3, 0x00, 0x96, 0x01, 0x5F, 0x69, 0x0C, 0xCD, 0xE3, 0x00, 
                0x0F, 0x0C, 0x0F, 0x64, 0x4E, 0xCD, 0xE3, 0x00, 0x96, 0x01, 
                0x76, 0x69, 0x0D, 0xCD, 0xE3, 0x00, 0x0A, 0x0D, 0x0E, 0x64, 
                0x45, 0xCD, 0xE3, 0x00, 0x96, 0x03, 0x01, 0xFF]

i = 0
with open("disassembler.txt", "w") as f:
    while(i < len(vm_bytecode)):
        VM_run = vm_bytecode[i]
        i += 1

        if VM_run == 0x5:
            f.write("\nADD R1, " + "vm->data[0x{:02x}], vm->data[0x{:02x}]".format(vm_bytecode[i + 1], vm_bytecode[i]))
            i += 2

        elif VM_run == 0x0A:
            f.write("\nSUB R1, " + "vm->data[0x{:02x}], vm->data[0x{:02x}]".format(vm_bytecode[i], vm_bytecode[i + 1]))
            i += 2

        elif VM_run == 0x0F:
            f.write("\nIMUL R1, " + "vm->data[0x{:02x}], vm->data[0x{:02x}]".format(vm_bytecode[i + 1], vm_bytecode[i]))
            i += 2

        elif VM_run == 0x1E:
            f.write("\nXOR R1, " + "vm->data[0x{:02x}], vm->data[0x{:02x}]".format(vm_bytecode[i + 1], vm_bytecode[i]))
            i += 2

        elif VM_run == 0x64:
            f.write("\nMOV R1, " + "0x{:02x}".format(vm_bytecode[i]))
            i += 1

        elif VM_run == 0x69:
            f.write("\nMOV vm->data[" + "0x{:02x}".format(vm_bytecode[i]) + "], R1")
            i += 1

        elif VM_run == 0x96:
            if vm_bytecode[i] == 0x1:
                f.write("\nMOV R1, " + "0x{:02x}".format(vm_bytecode[i + 1]))
                i += 2

            elif vm_bytecode[i] == 0x2:
                f.write("\nMOV R2, " + "0x{:02x}".format(vm_bytecode[i + 1]))
                i += 2

            elif vm_bytecode[i] == 0x3:
                f.write("\nMOV R3, R1, " + "0x{:02x}".format(vm_bytecode[i + 2]))
                i += 2

        elif VM_run == 0xCD:
            f.write("\nCMP R1, 0")
            if vm_bytecode[i] != 0:
                i += 2
            else:
                f.write("\nRETN " + "0x{:02x}".format(vm_bytecode[i + 1]))

